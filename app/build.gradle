apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'androidx.navigation.safeargs.kotlin'

android {
    compileSdkVersion 28
    defaultConfig {
        applicationId "com.apps.albertmartorell.meteomarto"
        minSdkVersion 21
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        targetCompatibility = "1.8"
        sourceCompatibility = "1.8"
    }
    buildToolsVersion = '28.0.3'

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
    }

    dataBinding {
        enabled = true
    }
}

dependencies {

    implementation fileTree(dir: 'libs', include: ['*.jar'])

    //reference the data, usecases and domain modules from the app module
    implementation project(':data')
    implementation project(':usecases')
    implementation project(':domain')

    implementation androidLibs.values()
    implementation kotlinLibs.values()
    implementation libs.values()
    kapt androidKaptLibs.values()
    testImplementation testLibs.values()
    androidTestImplementation androidTestLibs.values()

    // Testing
    //testImplementation "junit:junit:$jUnitVersion"
    // Mockito omple amb nulls els valors de les classes que mockeja. I això ens pot donar problemes amb classes
    // amb valors no nullables.
    //testImplementation "com.nhaarman.mockitokotlin2:mockito-kotlin:2.1.0"
    // com que en Kotlin les classes són final per defecte, utilitzarem aquesta feature que és capaç de moquejar
    // aquestes classes final. Així evitem d'haver de fer codi específic per a testing.
    //testImplementation "org.mockito:mockito-inline:2.28.2"
}
