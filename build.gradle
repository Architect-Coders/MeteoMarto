// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    ext.kotlinVersion = '1.3.70'
    ext.retrofitVersion = '2.7.0'
    ext.okhttpVersion = '4.3.0'
    ext.gsonVersion = '2.8.6'
    ext.coroutinesVersion = "1.3.0"
    ext.roomVersion = "2.2.3"
    ext.architectureComponents = "1.1.1"
    ext.liveDataVersion = "2.2.0"
    ext.glideVersion = "4.11.0"
    ext.koinVersion = "2.0.1"
    ext.jUnitVersion = "4.13"
    ext.navigationVersion = "2.2.0"

    repositories {
        google()
        jcenter()

    }
    dependencies {
        def navigatonSafeArgsVersion = "2.1.0"
        classpath "androidx.navigation:navigation-safe-args-gradle-plugin:$navigationVersion"
        classpath 'com.android.tools.build:gradle:3.5.3'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
        classpath "androidx.navigation:navigation-safe-args-gradle-plugin:$navigatonSafeArgsVersion"
        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

allprojects {
    repositories {
        google()
        jcenter()

    }

    ext {

        androidLibs = [
                appcompat                   : 'androidx.appcompat:appcompat:1.1.0',
                recyclerview                : 'androidx.recyclerview:recyclerview:1.1.0',
                constraintlayout            : 'androidx.constraintlayout:constraintlayout:1.1.3',
                androidxCore                : 'androidx.core:core-ktx:1.1.0',
                lifecycleExtensions         : "android.arch.lifecycle:extensions:$architectureComponents",
                lifecycleExtensionsViewModel: "android.arch.lifecycle:viewmodel:$architectureComponents",
                liveDataCoreKtx             : "androidx.lifecycle:lifecycle-livedata-core-ktx:$liveDataVersion",
                liveDataKtx                 : "androidx.lifecycle:lifecycle-livedata-ktx:$liveDataVersion",
                liveDataViewModelKtx        : "androidx.lifecycle:lifecycle-viewmodel-ktx:$liveDataVersion",
                playServicesLocation        : 'com.google.android.gms:play-services-location:17.0.0',
                material                    : 'com.google.android.material:material:1.0.0',
                roomRuntime                 : "androidx.room:room-runtime:$roomVersion",
                roomKotlin                  : "androidx.room:room-ktx:$roomVersion",
                glide                       : "com.github.bumptech.glide:glide:$glideVersion",
                dexter                      : 'com.karumi:dexter:6.0.1',
                navigation                  : "androidx.navigation:navigation-fragment-ktx:$navigationVersion",
                navigationKotlin            : "androidx.navigation:navigation-ui-ktx:$navigationVersion"
        ]

        androidKaptLibs = [
                roomCompiler : "androidx.room:room-compiler:$roomVersion",
                glideCompiler: "com.github.bumptech.glide:compiler:$glideVersion"
        ]

        kotlinLibs = [
                stdlib    : "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlinVersion",
                coroutines: "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutinesVersion"
        ]

        libs = [
                okhttpLoginInterceptor: "com.squareup.okhttp3:logging-interceptor:$okhttpVersion",
                retrofit              : "com.squareup.retrofit2:retrofit:$retrofitVersion",
                retrofitGsonConverter : "com.squareup.retrofit2:converter-gson:$retrofitVersion",
                koinAndroidxViewModel : "org.koin:koin-androidx-viewmodel:$koinVersion",
                koinAndroid           : "org.koin:koin-android:$koinVersion",
                koinAndroidxScope     : "org.koin:koin-androidx-scope:$koinVersion",
                koinCore              : "org.koin:koin-core:$koinVersion"
        ]

        testLibs = [
                junit        : "junit:junit:$jUnitVersion",
                // Mockito és un framework que permet crear mocks de manera automàtica. DE tal forma que permet verificar
                // quines funcions han estat cridades i quantes vegades ho han fet.
                // La primera llibreria, el que fa és solucionar un problema amb Kotlin: Mockito el que fa és omplir amb nulls
                // la majoria dels components de les classes que mockeja, ia ixo amb kotlin dóna problemes perquè una classe pot
                // ser no nullable.
                mockitoKotlin: "com.nhaarman.mockitokotlin2:mockito-kotlin:2.1.0",
                // Com que et Kolitn les classes són final per defecte, aquesta el que fa és que una classe encara que sigui
                // final, es pogui mockejar.
                mockitoInline: "org.mockito:mockito-inline:2.28.2",
                testShared   : project(':testShared')
        ]

        // LiveData té 2 problemes per fer testing:
        // 1. LiveData sempre busquen el main thread per executar els observers, així s'asseugren que la
        // actualització de les dades es fan el fin principal. Però en els tests això falla, perquè
        // en els tests no hi ha fil principal.
        // Aquesta llibreria ens permet afegir una rule en els testos, la qual obliga als LiveData
        // a executar-se sempre al fil del test, en comptes de buscar el fil principal.
        // 2. Per altra banda, en els testos no tenim un objecte Lifecycle, per tant podem utilitzar el observe per
        // testejar-lo. Hem d'utilitzar una funció que es diu observeForEver i passer-li un observe mockejat.
        androidxTestLibs = [
                archCoreTesting: 'android.arch.core:core-testing:1.1.1'
        ]

        androidTestLibs = [
                testRunner: 'androidx.test:runner:1.2.0',
                espresso  : 'androidx.test.espresso:espresso-core:3.2.0'
        ]

    }

}

task clean(type: Delete) {
    delete rootProject.buildDir
}
